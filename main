import pygame
import random

# --- Inicialização ---
pygame.init()
pygame.mixer.init()

# --- Constantes e configurações ---
LARGURA_TELA, ALTURA_TELA = 1024, 512
FPS = 60

# Cores
BRANCO = (255, 255, 255)

# Velocidades e tempos do boost
BOOST_VELOCIDADE_BONUS = 5
BOOST_INTERVALO_MS = 10000   # 10 segundos para liberar boost
BOOST_DURACAO_MS = 5000      # boost dura 5 segundos

# --- Carregamento de recursos ---
# Música
musicamenu = pygame.mixer.Sound("Downloads\\Audio - Songs\\OMORI OST - 103 Gator Gambol.mp3")
musicajogo = pygame.mixer.Sound("Downloads\\Audio - Songs\\Deltarune Chapter 2 OST_ 35 - Knock You Down !!.mp3")

# Imagens
def carregar_imagem_caminho(caminho, tamanho=None):
    img = pygame.image.load(caminho)
    return pygame.transform.scale(img, tamanho) if tamanho else img

botao_menu_jogo = carregar_imagem_caminho("Downloads\\Images - Menu\\Botao_Jogar.png", (200, 80))
botao_menu_tutorial = carregar_imagem_caminho("Downloads\\Images - Menu\\Botao_Tutorial.png", (200, 80))
botao_dificuldade_easy = carregar_imagem_caminho("Downloads\\Images - Menu\\Botao_easy_dificuldade.png", (128, 128))
botao_dificuldade_hard = carregar_imagem_caminho("Downloads\\Images - Menu\\Botao_hard_dificuldade.png", (128, 128))
mago_eastergg = carregar_imagem_caminho("Downloads\\Images - Sprites\\The Mage (IDK).png", (128, 128))

menu_bg = carregar_imagem_caminho("Downloads\\Images - Menu\\Overdrift_Menu.png", (LARGURA_TELA, ALTURA_TELA))
mapa_bg = carregar_imagem_caminho("Downloads\\Images - Menu\\Overdriftmap_VF.png", (LARGURA_TELA, ALTURA_TELA))
dificuldade_bg = carregar_imagem_caminho("Downloads\\Images - Menu\\Overdrift_dificulty_VFinal-export.png", (LARGURA_TELA, ALTURA_TELA))
tutorial_bg = carregar_imagem_caminho("Downloads\\Images - Menu\\Botao_Tutorial.png", (LARGURA_TELA, ALTURA_TELA))

carro_img = carregar_imagem_caminho("Downloads\\Images - Sprites\\Carro_MC_V1.png", (64, 64))
bolha_invincibilidade = carregar_imagem_caminho("Downloads\\Images - Sprites\\Bolha_Invincibilidade.png", (80, 80))

# Nova imagem: moeda XP
xp_moeda_img = carregar_imagem_caminho("Downloads\\Images - Sprites\\EXP_Token.png", (48, 48))

# Nova imagem: cone obstáculo
cone_obstaculo = pygame.image.load("Downloads\\Images - Sprites\\Obstaculo_2.png")
cone_obstaculo = pygame.transform.scale(cone_obstaculo, (64, 64))

# Fonte para textos
fonte = pygame.font.SysFont(None, 36)

# --- Inicializa a tela ---
display_surface = pygame.display.set_mode((LARGURA_TELA, ALTURA_TELA))
pygame.display.set_icon(carro_img)
pygame.display.set_caption('OverDrift.exe')

clock = pygame.time.Clock()

# --- Variáveis globais ---
menuactive = True
tutorialactive = False
dificuldadeactive = False
gameactive = False
paused = False 

musicajatocando = False
dificuldadedojogo = 0

score = 0
score_timer = 0

xp_moeda_rect = None
xp_tempo_ultimo_spawn = 0
XP_SPAWN_INTERVAL_MS = 5000  # 5 segundos

# Velocidade do carro e controle da desaceleração
velocidade_base = 7
velocidade_atual = velocidade_base
desacelerado = False
desacelera_timer = 0

# Posições dos botões (hitboxes)
hitboxbotaomenujogo = botao_menu_jogo.get_rect(topleft=(250, 300))
hitboxbotaomenututorial = botao_menu_tutorial.get_rect(topleft=(575, 300))
hitboxbotaodificuldadeeasy = botao_dificuldade_easy.get_rect(topleft=(320, 300))
hitboxbotaodificuldadehard = botao_dificuldade_hard.get_rect(topleft=(640, 300))

# --- Jogador e Obstáculos ---
carro_rect = carro_img.get_rect(center=(LARGURA_TELA // 2, ALTURA_TELA - 100))

obstaculos = []  # Lista de tuplas: (tipo:str, rect:pygame.Rect)

# --- Boost ---
boost_cooldown = 0
boost_duration = 0
boost_ativo = False

# --- Funções ---

def resetar_jogo():
    global carro_rect, obstaculos, score, score_timer, boost_cooldown, boost_duration, boost_ativo
    global xp_moeda_rect, xp_tempo_ultimo_spawn
    global velocidade_atual, desacelerado, desacelera_timer
    score = 0
    score_timer = 0
    boost_cooldown = 0
    boost_duration = 0
    boost_ativo = False
    xp_moeda_rect = None
    xp_tempo_ultimo_spawn = 0
    velocidade_atual = velocidade_base
    desacelerado = False
    desacelera_timer = 0
    carro_rect.center = (LARGURA_TELA // 2, ALTURA_TELA - 100)
    obstaculos.clear()

    obstaculos_temp = []
    quantidade = 5 * (dificuldadedojogo + 1)

    for _ in range(quantidade):
        if dificuldadedojogo == 1:
            tipo = random.choice(["carro", "onibus", "cone"])
        else:
            tipo = random.choice(["carro", "onibus"])
        
        # Define tamanho baseado no tipo
        if tipo == "carro":
            w, h = 64, 64
        elif tipo == "onibus":
            w, h = 64, 128
        else:  # cone
            w, h = 64, 64
        
        # Tenta encontrar posição válida sem colisão
        tentativas = 0
        while True:
            x = random.randint(0, LARGURA_TELA - w)
            y = random.randint(-600, -64 if tipo == "carro" or tipo == "cone" else -128)
            novo_rect = pygame.Rect(x, y, w, h)

            colisao = any(novo_rect.colliderect(r[1]) for r in obstaculos_temp)
            if xp_moeda_rect and novo_rect.colliderect(xp_moeda_rect):
                colisao = True

            if not colisao:
                obstaculos_temp.append((tipo, novo_rect))
                break

            tentativas += 1
            if tentativas > 100:
                obstaculos_temp.append((tipo, novo_rect))
                break

    obstaculos.extend(obstaculos_temp)

def tocar_musica():
    global musicajatocando
    if gameactive:  # Música da fase
        if musicajatocando != 'game':
            pygame.mixer.stop()
            musicajogo.play(-1)
            musicajatocando = 'game'
    else:  # Música do menu
        if musicajatocando != 'menu':
            pygame.mixer.stop()
            musicamenu.play(-1)
            musicajatocando = 'menu'

def desenhar_menu():
    display_surface.blit(menu_bg, (0, 0))
    display_surface.blit(botao_menu_jogo, hitboxbotaomenujogo.topleft)
    display_surface.blit(botao_menu_tutorial, hitboxbotaomenututorial.topleft)

def desenhar_tutorial():
    display_surface.blit(tutorial_bg, (0, 0))

def desenhar_dificuldade(tecla):
    display_surface.blit(dificuldade_bg, (0, 0))
    display_surface.blit(botao_dificuldade_easy, hitboxbotaodificuldadeeasy.topleft)
    display_surface.blit(botao_dificuldade_hard, hitboxbotaodificuldadehard.topleft)
    if tecla[pygame.K_m] and tecla[pygame.K_a] and tecla[pygame.K_g]:
        display_surface.blit(mago_eastergg, (LARGURA_TELA - 128, ALTURA_TELA - 128))
        pygame.display.set_caption('Mago da internet! Parabéns em achar um easter egg!')

def movimentar_carro(tecla, velocidade):
    if tecla[pygame.K_w]:
        carro_rect.y -= velocidade
    if tecla[pygame.K_s]:
        carro_rect.y += velocidade
    if tecla[pygame.K_a]:
        carro_rect.x -= velocidade
    if tecla[pygame.K_d]:
        carro_rect.x += velocidade
    carro_rect.clamp_ip(display_surface.get_rect())

def atualizar_obstaculos():
    global gameactive, musicajatocando, menuactive
    global desacelerado, desacelera_timer, velocidade_atual
    velocidade_obstaculo = 5
    for i, (tipo, rect) in enumerate(obstaculos):
        rect.y += velocidade_obstaculo
        if tipo == "carro":
            display_surface.blit(carro_obstaculo_ciano, rect.topleft)
        elif tipo == "onibus":
            display_surface.blit(onibus_obstaculo, rect.topleft)
        elif tipo == "cone":
            display_surface.blit(cone_obstaculo, rect.topleft)

        if not boost_ativo and carro_rect.colliderect(rect):
            if tipo == "cone":
                desacelerado = True
                desacelera_timer = 3000  # 3 segundos
                velocidade_atual = velocidade_base * 0.5
                rect.y = ALTURA_TELA + 100  # Remove o cone da tela para evitar múltiplas colisões rápidas
            else:
                display_surface.blit(explosao, carro_rect.topleft)
                pygame.display.update()
                pygame.time.delay(1000)
                global gameactive, menuactive, musicajatocando, tutorialactive, dificuldadeactive
                gameactive = False
                menuactive = True
                tutorialactive = False    # força desativar tutorial
                dificuldadeactive = False  # força desativar dificuldade
                musicajatocando = False
                resetar_jogo()
                break

        if rect.top > ALTURA_TELA:
            rect.x = random.randint(0, LARGURA_TELA - rect.width)
            rect.y = random.randint(-600, -64 if tipo == "carro" else -128 if tipo == "onibus" else -64)
            obstaculos[i] = (tipo, rect)

def desenhar_boost():
    if boost_ativo:
        bolha_pos = (carro_rect.centerx - bolha_invincibilidade.get_width() // 2,
                     carro_rect.centery - bolha_invincibilidade.get_height() // 2)
        display_surface.blit(bolha_invincibilidade, bolha_pos)

def desenhar_score():
    texto = fonte.render(f"Score: {score}", True, BRANCO)
    display_surface.blit(texto, (10, 10))

def desenhar_texto_boost():
    if boost_cooldown >= BOOST_INTERVALO_MS and not boost_ativo:
        texto = fonte.render("Aperte o Shift para ativar o boost!", True, BRANCO)
        display_surface.blit(texto, (10, ALTURA_TELA - 40))

def spawn_xp_moeda():
    global xp_moeda_rect
    w, h = xp_moeda_img.get_width(), xp_moeda_img.get_height()
    tentativas = 0
    while True:
        x = random.randint(0, LARGURA_TELA - w)
        y = random.randint(0, ALTURA_TELA - h)
        novo_rect = pygame.Rect(x, y, w, h)

        colisao = any(novo_rect.colliderect(r[1]) for r in obstaculos)
        if novo_rect.colliderect(carro_rect):
            colisao = True
        
        if not colisao:
            xp_moeda_rect = novo_rect
            break

        tentativas += 1
        if tentativas > 100:
            xp_moeda_rect = novo_rect
            break

# Carregar sprites de obstáculos (sem escala para manter compatibilidade)
carro_obstaculo_ciano = pygame.image.load("Downloads\\Images - Sprites\\Carro_Obstaculo_(Ciano).png")
carro_obstaculo_ciano = pygame.transform.scale(carro_obstaculo_ciano, (64, 64))
carro_obstaculo_ciano = pygame.transform.flip(carro_obstaculo_ciano, False, True)

onibus_obstaculo = pygame.image.load("Downloads\\Images - Sprites\\Onibus_Obstaculo_V0.png")
onibus_obstaculo = pygame.transform.scale(onibus_obstaculo, (64, 128))

explosao = pygame.image.load("Downloads\\Images - Sprites\\Explosao_derrota.png")  # arquivo sem acento
explosao = pygame.transform.scale(explosao, (128, 128))

# --- Reset inicial ---
resetar_jogo()

# --- Loop principal ---
running = True
while running:
    ms = clock.tick(FPS)
    tecla = pygame.key.get_pressed()

    tocar_musica()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        if event.type == pygame.KEYDOWN:
            if tutorialactive:
                tutorialactive = False
                menuactive = True
            if dificuldadeactive and event.key == pygame.K_ESCAPE:
                dificuldadeactive = False
                menuactive = True

        if event.type == pygame.MOUSEBUTTONDOWN:
            pos = event.pos
            if menuactive:
                if hitboxbotaomenujogo.collidepoint(pos):
                    menuactive = False
                    dificuldadeactive = True
                elif hitboxbotaomenututorial.collidepoint(pos):
                    menuactive = False
                    tutorialactive = True
            elif dificuldadeactive:
                if hitboxbotaodificuldadeeasy.collidepoint(pos):
                    gameactive = True
                    dificuldadeactive = False
                    musicajatocando = False
                    dificuldadedojogo = 0
                    resetar_jogo()
                elif hitboxbotaodificuldadehard.collidepoint(pos):
                    gameactive = True
                    dificuldadeactive = False
                    musicajatocando = False
                    dificuldadedojogo = 1
                    resetar_jogo()

    # Atualiza timer da desaceleração antes do movimento
    if desacelerado:
        desacelera_timer -= ms
        if desacelera_timer <= 0:
            desacelerado = False
            velocidade_atual = velocidade_base

    # Usa velocidade atual + boost para movimentar
    velocidade = velocidade_atual + (BOOST_VELOCIDADE_BONUS if boost_ativo else 0)
    movimentar_carro(tecla, velocidade)

    # Controle boost
    if not boost_ativo:
        boost_cooldown += ms
        if boost_cooldown > BOOST_INTERVALO_MS:
            boost_cooldown = BOOST_INTERVALO_MS
        if boost_cooldown >= BOOST_INTERVALO_MS and (tecla[pygame.K_LSHIFT] or tecla[pygame.K_RSHIFT]):
            boost_ativo = True
            boost_duration = BOOST_DURACAO_MS
            boost_cooldown = 0
    else:
        boost_duration -= ms
        if boost_duration <= 0:
            boost_ativo = False
            boost_duration = 0
            boost_cooldown = 0

    if menuactive:
        desenhar_menu()
    elif tutorialactive:
        desenhar_tutorial()
    elif dificuldadeactive:
        desenhar_dificuldade(tecla)
    elif gameactive:
        display_surface.blit(mapa_bg, (0, 0))
        display_surface.blit(carro_img, carro_rect.topleft)
        desenhar_boost()
        atualizar_obstaculos()

        score_timer += ms
        if score_timer >= 100:
            score += 1 * (dificuldadedojogo + 1)
            score_timer = 0

        xp_tempo_ultimo_spawn += ms
        if xp_moeda_rect is None and xp_tempo_ultimo_spawn >= XP_SPAWN_INTERVAL_MS:
            spawn_xp_moeda()
            xp_tempo_ultimo_spawn = 0

        if xp_moeda_rect and carro_rect.colliderect(xp_moeda_rect):
            score += 1000
            xp_moeda_rect = None

        if xp_moeda_rect:
            display_surface.blit(xp_moeda_img, xp_moeda_rect.topleft)

        desenhar_score()
        desenhar_texto_boost()

    pygame.display.update()

pygame.quit()