import pygame
import random

# --- Inicialização ---
pygame.init()
pygame.mixer.init()

# --- Constantes e configurações ---
LARGURA_TELA, ALTURA_TELA = 1024, 512
FPS = 60

# Cores
BRANCO = (255, 255, 255)

# Velocidades e tempos do boost
BOOST_VELOCIDADE_BONUS = 5
BOOST_INTERVALO_MS = 10000   # 10 segundos para liberar boost
BOOST_DURACAO_MS = 5000      # boost dura 5 segundos

# --- Carregamento de recursos ---
# Música
musicamenu = pygame.mixer.Sound("Downloads\\Audio - Songs\\OMORI OST - 103 Gator Gambol.mp3")
musicajogo = pygame.mixer.Sound("Downloads\\Audio - Songs\\Deltarune Chapter 2 OST_ 35 - Knock You Down !!.mp3")

# Imagens
def carregar_imagem_caminho(caminho, tamanho=None):
    img = pygame.image.load(caminho)
    return pygame.transform.scale(img, tamanho) if tamanho else img

botao_menu_jogo = carregar_imagem_caminho("Downloads\\Images - Menu\\Botao_Jogar.png", (200, 80))
botao_menu_tutorial = carregar_imagem_caminho("Downloads\\Images - Menu\\Botao_Tutorial.png", (200, 80))
botao_dificuldade_easy = carregar_imagem_caminho("Downloads\\Images - Menu\\Botao_easy_dificuldade.png", (128, 128))
botao_dificuldade_hard = carregar_imagem_caminho("Downloads\\Images - Menu\\Botao_hard_dificuldade.png", (128, 128))
mago_eastergg = carregar_imagem_caminho("Downloads\\Images - Sprites\\The Mage (IDK).png", (128, 128))

menu_bg = carregar_imagem_caminho("Downloads\\Images - Menu\\Overdrift_Menu.png", (LARGURA_TELA, ALTURA_TELA))
mapa_bg = carregar_imagem_caminho("Downloads\\Images - Menu\\Overdriftmap_VF.png", (LARGURA_TELA, ALTURA_TELA))
dificuldade_bg = carregar_imagem_caminho("Downloads\\Images - Menu\\Overdrift_dificulty_Correct.png", (LARGURA_TELA, ALTURA_TELA))
tutorial_bg = carregar_imagem_caminho("Downloads\\Images - Menu\\Botao_Tutorial.png", (LARGURA_TELA, ALTURA_TELA))

carro_img = carregar_imagem_caminho("Downloads\\Images - Sprites\\Carro_MC_V1.png", (64, 64))
bolha_invincibilidade = carregar_imagem_caminho("Downloads\\Images - Sprites\\Bolha_Invincibilidade.png", (80, 80))

# Fonte para textos
fonte = pygame.font.SysFont(None, 36)

# --- Inicializa a tela ---
display_surface = pygame.display.set_mode((LARGURA_TELA, ALTURA_TELA))
pygame.display.set_icon(carro_img)
pygame.display.set_caption('OverDrift.exe')

clock = pygame.time.Clock()

# --- Variáveis globais ---
menuactive = True
tutorialactive = False
dificuldadeactive = False
gameactive = False
paused = False

musicajatocando = False
dificuldadedojogo = 0

score = 0
score_timer = 0

# Posições dos botões (hitboxes)
hitboxbotaomenujogo = botao_menu_jogo.get_rect(topleft=(250, 300))
hitboxbotaomenututorial = botao_menu_tutorial.get_rect(topleft=(575, 300))
hitboxbotaodificuldadeeasy = botao_dificuldade_easy.get_rect(topleft=(320, 300))
hitboxbotaodificuldadehard = botao_dificuldade_hard.get_rect(topleft=(640, 300))

# --- Jogador e Obstáculos ---
carro_rect = carro_img.get_rect(center=(LARGURA_TELA // 2, ALTURA_TELA - 100))

obstaculos = []  # Lista de tuplas: (tipo:str, rect:pygame.Rect)

# --- Boost ---
boost_cooldown = 0
boost_duration = 0
boost_ativo = False

# --- Funções ---

def resetar_jogo():
    global carro_rect, obstaculos, score, score_timer, boost_cooldown, boost_duration, boost_ativo
    score = 0
    score_timer = 0
    boost_cooldown = 0
    boost_duration = 0
    boost_ativo = False
    carro_rect.center = (LARGURA_TELA // 2, ALTURA_TELA - 100)
    obstaculos.clear()
    for _ in range(5 * (dificuldadedojogo + 1)):
        tipo = random.choice(["carro", "onibus"])
        if tipo == "carro":
            rect = pygame.Rect(random.randint(0, LARGURA_TELA - 64), random.randint(-600, -64), 64, 64)
        else:
            rect = pygame.Rect(random.randint(0, LARGURA_TELA - 64), random.randint(-600, -128), 64, 128)
        obstaculos.append((tipo, rect))

def tocar_musica():
    global musicajatocando
    if not gameactive and not musicajatocando:
        pygame.mixer.music.set_volume(0.0001)
        musicamenu.play(-1)
        musicajatocando = True
    elif gameactive and not musicajatocando:
        pygame.mixer.stop()
        musicajogo.play(-1)
        musicajatocando = True

def desenhar_menu():
    display_surface.blit(menu_bg, (0, 0))
    display_surface.blit(botao_menu_jogo, hitboxbotaomenujogo.topleft)
    display_surface.blit(botao_menu_tutorial, hitboxbotaomenututorial.topleft)

def desenhar_tutorial():
    display_surface.blit(tutorial_bg, (0, 0))

def desenhar_dificuldade(tecla):
    display_surface.blit(dificuldade_bg, (0, 0))
    display_surface.blit(botao_dificuldade_easy, hitboxbotaodificuldadeeasy.topleft)
    display_surface.blit(botao_dificuldade_hard, hitboxbotaodificuldadehard.topleft)
    if tecla[pygame.K_m] and tecla[pygame.K_a] and tecla[pygame.K_g]:
        display_surface.blit(mago_eastergg, (LARGURA_TELA - 128, ALTURA_TELA - 128))
        pygame.display.set_caption('Mago da internet! Parabéns em achar um easter egg!')

def movimentar_carro(tecla, velocidade):
    if tecla[pygame.K_w]:
        carro_rect.y -= velocidade
    if tecla[pygame.K_s]:
        carro_rect.y += velocidade
    if tecla[pygame.K_a]:
        carro_rect.x -= velocidade
    if tecla[pygame.K_d]:
        carro_rect.x += velocidade
    carro_rect.clamp_ip(display_surface.get_rect())

def atualizar_obstaculos():
    global gameactive, musicajatocando
    velocidade_obstaculo = 5
    for i, (tipo, rect) in enumerate(obstaculos):
        rect.y += velocidade_obstaculo
        if tipo == "carro":
            display_surface.blit(carro_obstaculo_ciano, rect.topleft)
        else:
            display_surface.blit(onibus_obstaculo, rect.topleft)
        # Colisão somente se boost não ativo
        if not boost_ativo and carro_rect.colliderect(rect):
            # Explosão e reset do jogo
            display_surface.blit(explosao, carro_rect.topleft)
            pygame.display.update()
            pygame.time.delay(1000)
            gameactive = False
            musicajatocando = False
            resetar_jogo()
            break
        if rect.top > ALTURA_TELA:
            rect.x = random.randint(0, LARGURA_TELA - rect.width)
            rect.y = random.randint(-600, -64 if tipo == "carro" else -128)
            obstaculos[i] = (tipo, rect)

def desenhar_boost():
    if boost_ativo:
        bolha_pos = (carro_rect.centerx - bolha_invincibilidade.get_width() // 2,
                     carro_rect.centery - bolha_invincibilidade.get_height() // 2)
        display_surface.blit(bolha_invincibilidade, bolha_pos)

def desenhar_score():
    texto = fonte.render(f"Score: {score}", True, BRANCO)
    display_surface.blit(texto, (10, 10))

def desenhar_texto_boost():
    if boost_cooldown >= BOOST_INTERVALO_MS and not boost_ativo:
        texto = fonte.render("Segure Shift para ativar o boost", True, BRANCO)
        display_surface.blit(texto, (10, ALTURA_TELA - 40))

# Carregar sprites de obstáculos (sem escala para manter compatibilidade)
carro_obstaculo_ciano = pygame.image.load("Downloads\\Images - Sprites\\Carro_Obstaculo_(Ciano).png")
carro_obstaculo_ciano = pygame.transform.scale(carro_obstaculo_ciano, (64, 64))
carro_obstaculo_ciano = pygame.transform.flip(carro_obstaculo_ciano, False, True)

onibus_obstaculo = pygame.image.load("Downloads\\Images - Sprites\\Onibus_Obstaculo_V0.png")
onibus_obstaculo = pygame.transform.scale(onibus_obstaculo, (64, 128))

explosao = pygame.image.load("Downloads\\Images - Sprites\\Explosao_derrota.png")  # arquivo sem acento
explosao = pygame.transform.scale(explosao, (128, 128))

# --- Reset inicial ---
resetar_jogo()

# --- Loop principal ---
running = True
while running:
    ms = clock.tick(FPS)
    tecla = pygame.key.get_pressed()

    # Atualiza música de fundo
    tocar_musica()

    # Processa eventos
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        if event.type == pygame.KEYDOWN:
            if tutorialactive:
                tutorialactive = False
                menuactive = True
            if dificuldadeactive and event.key == pygame.K_ESCAPE:
                dificuldadeactive = False
                menuactive = True

        if event.type == pygame.MOUSEBUTTONDOWN:
            pos = event.pos
            if menuactive:
                if hitboxbotaomenujogo.collidepoint(pos):
                    menuactive = False
                    dificuldadeactive = True
                elif hitboxbotaomenututorial.collidepoint(pos):
                    menuactive = False
                    tutorialactive = True
            elif dificuldadeactive:
                if hitboxbotaodificuldadeeasy.collidepoint(pos):
                    gameactive = True
                    dificuldadeactive = False
                    musicajatocando = False
                    dificuldadedojogo = 0
                    resetar_jogo()
                elif hitboxbotaodificuldadehard.collidepoint(pos):
                    gameactive = True
                    dificuldadeactive = False
                    musicajatocando = False
                    dificuldadedojogo = 1
                    resetar_jogo()

    # Atualiza tela conforme estado
    if menuactive:
        desenhar_menu()
    elif tutorialactive:
        desenhar_tutorial()
    elif dificuldadeactive:
        desenhar_dificuldade(tecla)
    elif gameactive:
        display_surface.blit(mapa_bg, (0, 0))

        # Atualiza boost
        if not boost_ativo:
            boost_cooldown += ms
            if boost_cooldown > BOOST_INTERVALO_MS:
                boost_cooldown = BOOST_INTERVALO_MS
        else:
            boost_duration -= ms
            if boost_duration <= 0:
                boost_ativo = False
                boost_duration = 0
                boost_cooldown = 0

        # Move o carro com velocidade aumentada se boost ativo
        velocidade = 7 + (BOOST_VELOCIDADE_BONUS if boost_ativo else 0)
        movimentar_carro(tecla, velocidade)

        # Ativa boost ao segurar Shift se disponível
        if boost_cooldown >= BOOST_INTERVALO_MS and (tecla[pygame.K_LSHIFT] or tecla[pygame.K_RSHIFT]):
            boost_ativo = True
            boost_duration = BOOST_DURACAO_MS
            boost_cooldown = 0

        # Desenha elementos do jogo
        display_surface.blit(carro_img, carro_rect.topleft)
        desenhar_boost()
        atualizar_obstaculos()

        # Atualiza pontuação
        score_timer += ms
        if score_timer >= 100:
            score += 1 * (dificuldadedojogo + 1)
            score_timer = 0
        desenhar_score()

        # Texto de boost disponível
        desenhar_texto_boost()

    pygame.display.update()

pygame.quit()
